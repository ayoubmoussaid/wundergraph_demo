// Code generated by wunderctl. DO NOT EDIT.

import type {
	CreateTaskResponse,
	CreateTaskInput,
	CreateTaskResponseData,
	DeleteTaskResponse,
	DeleteTaskInput,
	DeleteTaskResponseData,
	GetTasksResponse,
	GetTasksResponseData,
	HelloResponse,
	HelloResponseData,
	UpdateTaskResponse,
	UpdateTaskInput,
	UpdateTaskResponseData,
} from "./models";
import { createContext } from "react";
import {
	QueryArgsWithInput,
	SubscriptionArgs,
	SubscriptionArgsWithInput,
	hooks,
	WunderGraphContextProperties,
	Client,
} from "@wundergraph/nextjs";

export type Role = "admin" | "user";

const defaultWunderGraphContextProperties: WunderGraphContextProperties<Role> = {
	ssrCache: {},
	client: null,
	clientConfig: {
		applicationHash: "21dc04e2",
		applicationPath: "app/main",
		baseURL: "http://localhost:9991",
		sdkVersion: "0.96.1",
		authenticationEnabled: false,
	},
	user: null,
	setUser: (value) => {},
	isWindowFocused: "pristine",
	setIsWindowFocused: (value) => {},
	refetchMountedOperations: 0,
	setRefetchMountedOperations: (value) => {},
};

export const WunderGraphContext = createContext<WunderGraphContextProperties<Role>>(
	defaultWunderGraphContextProperties
);

export const withWunderGraph = hooks.withWunderGraphContextWrapper(
	WunderGraphContext,
	defaultWunderGraphContextProperties
);

export const useWunderGraph = hooks.useWunderGraph<Role, "">(WunderGraphContext);

export const useQuery = {
	GetTasks: hooks.useQueryWithoutInput<GetTasksResponseData, Role>(WunderGraphContext, {
		operationName: "GetTasks",
		requiresAuthentication: false,
	}),
	Hello: hooks.useQueryWithoutInput<HelloResponseData, Role>(WunderGraphContext, {
		operationName: "Hello",
		requiresAuthentication: false,
	}),
};

export const useMutation = {
	CreateTask: () =>
		hooks.useMutationWithInput<CreateTaskInput, CreateTaskResponseData, Role>(WunderGraphContext, {
			operationName: "CreateTask",
			requiresAuthentication: false,
		}),
	DeleteTask: () =>
		hooks.useMutationWithInput<DeleteTaskInput, DeleteTaskResponseData, Role>(WunderGraphContext, {
			operationName: "DeleteTask",
			requiresAuthentication: false,
		}),
	UpdateTask: () =>
		hooks.useMutationWithInput<UpdateTaskInput, UpdateTaskResponseData, Role>(WunderGraphContext, {
			operationName: "UpdateTask",
			requiresAuthentication: false,
		}),
};

export const useSubscription = {};

export const useLiveQuery = {
	GetTasks: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<GetTasksResponseData, Role>(WunderGraphContext, {
			operationName: "GetTasks",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	Hello: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<HelloResponseData, Role>(WunderGraphContext, {
			operationName: "Hello",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
};
